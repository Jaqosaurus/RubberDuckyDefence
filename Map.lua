--[[ 
    Hey, here's a map with paths for our ducky creeps to follow
]]

require 'Util'
require 'Wave'
require 'Towers'
require 'Creep'

Map = Class{}

TILE_EMPTY = -1
BATH = 1
SIDE = 2
RED_TOWER = 3
GREEN_TOWER = 4
BLUE_TOWER = 5


function Map:init(level)

    self.backgroundsheet = love.graphics.newImage('images/background1.png')
    self.backgrounds = generateQuads(self.backgroundsheet, 64, 64)

    self.tileWidth = 64
    self.tileHeight = 64
    self.mapWidth = VIRTUAL_WIDTH / self.tileWidth
    self.mapHeight = VIRTUAL_HEIGHT / self.tileHeight + 1

    self.tiles = {}

    self.level = level

    self.timer = 0

    self.nextWave = 30

    self.waveCount = 1

    self.maxWaves = 20

    self.completedLevel = false

    -- levels, ideally these should be stored in another file if I work out how to do that
    level1 = {
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
    }

    level2 = {
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
    }

    level3 = {
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
        {SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, SIDE, BATH, BATH, BATH, SIDE, SIDE, SIDE},
    }

    -- Associate wave and towers of creeps with map
    self.waves = Wave(self)
    self.towers = Towers(self, self.waves)


    -- generate the path from the level
        for y = 1, self.mapHeight do
            for x = 1, self.mapWidth do
                local l = 0

                -- working out the level - I'm certain there is a more efficient way to do this but a couple of things didn't work so this is to come back to, but a manual way for now
                if self.level == 1 then
                    l = level1
                elseif self.level == 2 then
                    l = level2
                elseif self.level == 3 then
                    l = level3
                end
                -- set the tile based on the level
                self:setTile(x, y, l[y][x])
            end
        end
end

-- function to allow us to build, to allow more conditions later
function Map:canBuild(tile)
    if tile.id == SIDE then
        return true
    end
    return false
end

function Map:update(dt)
    if gameState == 'run' then
        self.waves:update(dt)
        self:resolveHits()
    end
    -- allows you to build towers while the game is paused
    self.towers:update(dt)

end

-- gets the tile type at a given pixel coordinate
function Map:tileAt(x, y)
    return {
        x = math.floor(x / self.tileWidth) + 1,
        y = math.floor(y / self.tileHeight) + 1,
        id = self:getTile(math.floor(x / self.tileWidth) + 1, math.floor(y / self.tileHeight) + 1)
    }
end

-- gets the tile under the tile co-ordinates (x, y co-ordinates already translated to the position in the map grid)
function Map:tileUnder(x, y)
    return {
        x = x + 1,
        y = y + 1,
        id = self:getTile(x + 1, y + 1)
    }
end

-- Similar to setTile provided but with maths that works for when I wanted to change the tile under the mouse
function Map:changeTile(x, y, id)
    self.tiles[(y) * self.mapWidth + x + 1] = id
end

-- returns an integer value for the tile at a given x-y coordinate
function Map:getTile(x, y)
    return self.tiles[(y - 1) * self.mapWidth + x]
end

-- sets a tile at a given x-y coordinate to an integer value .
function Map:setTile(x, y, id)
    self.tiles[(y - 1) * self.mapWidth + x] = id
end


-- renders our map to the screen, to be called by main's render
function Map:render()
    for y = 1, self.mapHeight do
        for x = 1, self.mapWidth do
            local tile = self:getTile(x, y)
            love.graphics.draw(self.backgroundsheet, self.backgrounds[tile],
                (x - 1) * self.tileWidth, (y - 1) * self.tileHeight)
        end
    end

    if love.timer.getTime() > startTime and (gameState == 'run' or gameState == 'pause') then
        self.waves:render()
        self.towers:render()
    end
end

-- see if our projectiles have hit our duckies. Pew pew.
function Map:resolveHits()
    for i = table.getn(self.waves.creeps), 1, -1 do
        for j = table.getn(self.towers.projectiles), 1, -1 do
            local creep = self.waves.creeps[i]
            local projectile = self.towers.projectiles[j]
            if creep.x < projectile.x and creep.x + (creep.width * creep.scaleX) > projectile.x and
            creep.y < projectile.y and creep.y + (creep.height * creep.scaleY) > projectile.y then
                table.remove(self.towers.projectiles, j)
                creep.health = creep.health - projectile.damage
                creep.slowTimer = creep.slowTimer + projectile.slow
            end
        end
    end
end